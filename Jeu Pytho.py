import pygame
import math

pygame.init()
pygame.mixer.init()
pygame.display.set_caption("Python Game")

RP = 480
(surfaceW,surfaceH) = (int(16/9*RP)+RP,RP)


FOV = math.pi / 2
Casted_Rays = 120
Max_Depth = surfaceH
Step_Angle = FOV / Casted_Rays
Scale = surfaceW / 2 / Casted_Rays

pX = surfaceH / 2
pY = surfaceH / 2
pA = math.pi*0

FPS = 60

MapW1 = [
[1,1,1,1,1,1,1,1],
[1,0,0,0,0,1,0,1],
[1,0,0,0,0,3,0,1],
[1,0,0,0,0,1,0,1],
[1,0,0,0,0,1,0,1],
[1,1,1,1,1,1,3,1],
[1,0,0,0,0,0,0,1],
[1,1,1,1,1,1,1,1]]


MapW2 = [
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1],
[1,0,0,0,0,3,0,1,0,0,0,0,0,0,0,1],
[1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1],
[1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1],
[1,1,1,1,1,1,3,1,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]

MapW = MapW1

MapF = [
[1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1]]





All_Textures = [               #all 32x32 textures
#Checkerboard
[0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,1,1,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,1,1,1,1,1,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,1,1,1,1,1,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,1,1,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,

 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0,

 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,

 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0],
#Brick
[0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,

 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,

 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,

 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
#Window
[1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,    
       
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 

 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,   
       
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1],
#Door
[0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,    
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,    
 0,0,0,1,1,1,1,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,1,1,1,1,0,0,0,  
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,  
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,   
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,     

 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,  
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,    
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,    
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,   
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,  
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,  
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,  
 0,0,0,1,1,1,1,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,1,1,1,1,0,0,0,  

 0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,1, 1,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,0,0,0,0,0,0,0, 0,0,1,1,1,1,0,1, 1,0,1,1,1,1,0,0, 0,0,0,0,0,0,0,0,   
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,    
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,    
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,   
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 
 
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,     
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,   
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,   
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,   
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,  
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,   
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0]       
]


lenMapH = len(MapW)
lenMapW = len(MapW[0])

Map_Size = lenMapH
Tile_Size = surfaceH/Map_Size

win = pygame.display.set_mode((surfaceW,surfaceH)) # ajouter l'argument  suivant pour être en full screen : pygame.FULLSCREEN
clock = pygame.time.Clock()




def draw_map():
    for row in range(lenMapW):
        for col in range(lenMapH):
            square = (row, col)
            if MapW[square[0]][square[1]]>0: colorB = (200,200,200)
            else: colorB = (100,100,100)
            pygame.draw.rect(win, colorB , (col*Tile_Size, row*Tile_Size, Tile_Size-1, Tile_Size-1))
            pygame.draw.circle(win, (255,0,0), (int(pX),int(pY)),10)
            pygame.draw.line(win, (0,255,255), (pX,pY),(pX + math.cos(pA) * Tile_Size/2,pY - math.sin(pA) * Tile_Size/2),3)
            pygame.draw.line(win, (0,255,0), (pX,pY),(pX + math.cos(pA - FOV / 2) * Tile_Size/2,pY - math.sin(pA - FOV / 2) * Tile_Size/2),3)
            pygame.draw.line(win, (0,255,0),(pX,pY),(pX + math.cos(pA + FOV / 2) * Tile_Size/2,pY - math.sin(pA + FOV / 2) * Tile_Size/2),3)

def cast_rays():
    start_angle = pA + FOV / 2
    for ray in range(Casted_Rays):
        if start_angle < 0: start_angle+=2*math.pi
        if start_angle > 2*math.pi: start_angle-=2*math.pi

        
        #Check Horizontal Lines
        dof = 0
        if start_angle == 0 or start_angle == 2*math.pi:
            rx,ry = 200000,200000
            pass
        else:
            aTan = -1/math.tan(2*math.pi-start_angle)
            if 2*math.pi-start_angle > math.pi: #Looking Up
                ry = int(pY/Tile_Size)*Tile_Size-0.0001
                rx = pX-(ry-pY)*aTan
                y0 = -Tile_Size
                x0 = -y0*aTan
            else: #Looking Down
                ry = int(pY/Tile_Size)*Tile_Size+Tile_Size
                rx = pX-(ry-pY)*aTan
                y0 = Tile_Size
                x0 = -y0*aTan
            while(dof<lenMapH):
                mx = int(rx/Tile_Size)
                my = int(ry/Tile_Size)
                if 0<= my < lenMapH and 0<= mx < lenMapW and MapW[my][mx] > 0:
                    dof = lenMapH
                else:
                    rx += x0
                    ry += y0
                    dof += 1
        hx,hy = rx,ry
        distH = math.sqrt((hx-pX)**2+(hy-pY)**2)
        

        #Check Vertical Lines
        dof = 0
        if start_angle == math.pi/2 or start_angle == 3*math.pi/2:
            rx,ry = 200000,200000
            pass
        else:
            nTan = -math.tan(2*math.pi-start_angle)
            if math.pi/2 < 2*math.pi-start_angle < 3*math.pi/2: #Looking Left
                rx = int(pX/Tile_Size)*Tile_Size-0.0001
                ry = pY-(rx-pX)*nTan
                x0 = -Tile_Size
                y0 = -x0*nTan
            else: #Looking Right
                rx = int(pX/Tile_Size)*Tile_Size+Tile_Size
                ry = pY-(rx-pX)*nTan
                x0 = Tile_Size
                y0 = -x0*nTan
            while(dof<lenMapH):
                mx = int(rx/Tile_Size)
                my = int(ry/Tile_Size)
                if 0<= my < lenMapH and 0<= mx < lenMapW and MapW[my][mx] > 0:
                    dof = lenMapH
                else:
                    rx += x0
                    ry += y0
                    dof += 1
        vx,vy = rx,ry
        distV = math.sqrt((vx-pX)**2+(vy-pY)**2)
        

        if distH < distV:
            col = int(hx / Tile_Size)
            row = int(hy / Tile_Size)
            pygame.draw.rect(win, (0,255,0), (col*Tile_Size, row*Tile_Size, Tile_Size-1, Tile_Size-1))
            pygame.draw.line(win, (255,255,255), (pX,pY), (hx,hy))
            rx,ry = hx,hy
            distT = distH
            arg = "H"
            
        else:
            pygame.draw.line(win, (255,255,255), (pX,pY), (vx,vy))
            col = int(vx / Tile_Size)
            row = int(vy / Tile_Size)
            pygame.draw.rect(win, (0,255,0), (col*Tile_Size, row*Tile_Size, Tile_Size-1, Tile_Size-1))
            pygame.draw.rect(win, (0,255,0), (col*Tile_Size, row*Tile_Size, Tile_Size-1, Tile_Size-1))
            rx,ry = vx,vy
            distT = distV
            arg = "V"
        mx = int(rx/Tile_Size)
        my = int(ry/Tile_Size)
        face = MapW[my][mx]


        def color(face,n,distT,arg):
            pas = 0
            if len(All_Textures[face])%3 == 0:pas = 1
            if arg == "H": shade = 0.9
            else: shade = 1
            depth = 0.00002
            color1 = 255*All_Textures[face][n] / (1 + distT**2*depth)*shade
            color2 = 255*All_Textures[face][n+pas] / (1 + distT**2*depth)*shade
            color3 = 255*All_Textures[face][n+2*pas] / (1 + distT**2*depth)*shade
            return(color1,color2,color3)


        

        
        #Draw Walls
        N = 32 #Nombre de couches
        P = 32 #Définition
        cA = pA - start_angle

        if cA < 0: cA+=2*math.pi
        if cA > 2*math.pi: cA-=2*math.pi
        X = surfaceH + surfaceH*16/9/Casted_Rays*ray
        DX = surfaceH*16/9/Casted_Rays+1
        distT = distT*math.cos(cA)
        lineH = Tile_Size*surfaceH/distT
        line_off = surfaceH/2 - lineH/2
        tx = 0
        if arg == "H":
            tx = int((rx/Tile_Size-int(rx/Tile_Size))*P)
            if start_angle > math.pi: tx = 31-tx
        else:
            tx = int((ry/Tile_Size-int(ry/Tile_Size))*P)
            if math.pi/2 < start_angle < 3*math.pi/2: tx = 31-tx

        for y in range(N):
            color1,color2,color3 = color(face,int(P*P*y/N)+tx,distT,arg)
            pygame.draw.rect(win,(color1,color2,color3),
                                     (X  , line_off + y*lineH/N,
                                      DX , lineH/N + 1))
        #Draw Floors

        for y in range(int(line_off+lineH),surfaceH),int((surfaceH-(int(line_off+lineH)))/N):
            pass
            
            
        for y in range(int(line_off+lineH),surfaceH,int(surfaceH/64)):
            dy = y-surfaceH/2
            raFix = math.cos(pA-start_angle)
            tx = pX/2 + math.cos(start_angle)*158*32/dy/raFix
            ty = pY/2 - math.sin(start_angle)*158*32/dy/raFix
            mp = MapF[int(ty/32)][int(tx/32)]
            color1,color2,color3 = color(mp,int(ty/32)*32+int(tx/32),distT,arg)
            pygame.draw.rect(win,(color1,color2,color3),
                                     (X  , y,
                                      DX , int(surfaceH/64)))
       
            
        start_angle -= FOV / Casted_Rays





forward = True
fps = 1
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT: pygame.quit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE: pygame.quit()



    pygame.draw.rect(win, (0,0,0), (0,0,surfaceW,surfaceH))
    pygame.draw.rect(win, (99,40,0), (surfaceH,surfaceH/2,surfaceW,surfaceH))
    pygame.draw.rect(win, (156,215,255), (surfaceH,-surfaceH/2,surfaceW,surfaceH))
    

    draw_map()
    cast_rays()
    keys = pygame.key.get_pressed()
    

    if fps>0:
        if keys[pygame.K_q]:
            
            pA += 0.1*60/fps
            if pA < 0: pA+=2*math.pi
            if pA > 2*math.pi: pA-=2*math.pi
        if keys[pygame.K_d]:
            pA -= 0.1*60/fps
            if pA < 0: pA+=2*math.pi
            if pA > 2*math.pi: pA-=2*math.pi
        dx = math.cos(pA) * 5*8/Map_Size*60/fps
        dy = -math.sin(pA) * 5*8/Map_Size*60/fps
        if dx < 0: x0 = -Tile_Size/7
        else: x0 = Tile_Size/7
        if dy < 0: y0 = -Tile_Size/7
        else: y0 = Tile_Size/7
        if keys[pygame.K_z]:
            if MapW[int(pY/Tile_Size)][int((pX+x0)/Tile_Size)] == 0:
                pX += dx
            if MapW[int((pY+y0)/Tile_Size)][int(pX/Tile_Size)] == 0:
                pY += dy
        if keys[pygame.K_s]:
            if MapW[int(pY/Tile_Size)][int((pX-x0)/Tile_Size)] == 0:
                pX -= dx
            if MapW[int((pY-y0)/Tile_Size)][int(pX/Tile_Size)] == 0:
                pY -= dy
        if keys[pygame.K_e]:
            pas2 = 2
            if dx < 0: x0 = -Tile_Size/pas2
            else: x0 = Tile_Size/pas2
            if dy < 0: y0 = -Tile_Size/pas2
            else: y0 = Tile_Size/pas2
            if MapW[int(pY/Tile_Size)][int((pX+x0)/Tile_Size)] == 3:
                MapW[int(pY/Tile_Size)][int((pX+x0)/Tile_Size)] = 0
            if MapW[int((pY+y0)/Tile_Size)][int(pX/Tile_Size)] == 3:
                MapW[int((pY+y0)/Tile_Size)][int(pX/Tile_Size)] = 0


    
    clock.tick(FPS)
    fps = int(clock.get_fps())
    font = pygame.font.SysFont('Monospace Regular', 30)
    textsurface = font.render(str(fps), False, (255,255,255))
    win.blit(textsurface,(0,0))
    pygame.display.flip()



continuer = True
while continuer:
    event = pygame.event.poll()
    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_ESCAPE: continuer = False
    if event.type == pygame.QUIT: continuer = False
    

pygame.quit()
